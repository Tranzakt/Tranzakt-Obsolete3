<?php

/**
 * Create the Tranzakt metadata schema for Apps.
 *
 * This version of the file holds the definitions for metadata relating to
 * system-wide definitions for Connections/Databases, Apps, Versions, Tags
 *
 * Create tables by running: php artisan migrate:refresh
 */


use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

use Tranzakt\Developer\Traits\DeveloperMigration;

return new class extends Migration
{
    use DeveloperMigration;

	public function __construct() {
        // parent::__construct();
        $this->setConnectionType(file: basename(__FILE__, '.php'));
	}

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
		// Remove tables if they already exist.
		$this->down();

		// Databases
		Schema::connection($this->connection)
		->create('tranzakt_databases', function(Blueprint $table) {
			$table->string('name', 64);
			$table->json('connection', 64);
			$table->text('notes')->nullable();
			$this->common_columns(
				$table,
				'Tranzakt supports multiple database connections'
			);

			$table->unique(['deleted_at', 'name'], 'tranzakt_database_unique_name');
		});

		// Applications
		Schema::connection($this->connection)
		->create('tranzakt_applications', function(Blueprint $table) {
			$table->string('name');
			$table->string('table_prefix', 16);  // The prefix is added to the app_specific table name
            $table->string('copyright')->nullable()
                ->comment('String added to all Laravel code files generated by Tranzakt Developer');
			$table->text('notes')->nullable();
            $table->uuid('uuid');
            $table->json('settings');
            $this->common_columns(
				$table,
				'Tranzakt supports development of multiple applications with independent tables',
                versioned: false
			);

			$table->unique(['deleted_at', 'name'], 'tranzakt_applications_unique_name');
			$table->unique(['deleted_at', 'uuid'], 'tranzakt_applications_unique_uuid');
			$table->unique(['deleted_at', 'table_prefix'], 'tranzakt_applications_unique_table_prefix');
		});

		// Tags
		Schema::connection($this->connection)
        ->create('tranzakt_versions', function(Blueprint $table) {
			$table->foreignId('application_id')
                ->constrained('tranzakt_applications')->onDelete('cascade');
			$table->unsignedInteger('version');
			$table->text('description')->nullable();
			$this->common_columns(
				$table,
				'Published versions',
                versioned: false
			);

			$table->unique(['deleted_at', 'application_id', 'version'], 'tranzakt_tags_unique_app_id_name');
		});

		// Tags
		Schema::connection($this->connection)
		->create('tranzakt_tags', function(Blueprint $table) {
			$table->foreignId('application_id')
                ->constrained('tranzakt_applications')->onDelete('cascade');
			$table->string('name', 64);
			$table->text('notes')->nullable();
			$this->common_columns(
				$table,
				'Tag names and descriptions'
			);

			$table->unique(['deleted_at', 'application_id', 'name'], 'tranzakt_tags_unique_app_id_name');
		});

		// Taggables
		Schema::connection($this->connection)
		->create('tranzakt_taggables', function(Blueprint $table) {
			$table->foreignId('tag_id')
                ->constrained('tranzakt_tags')->onDelete('cascade');
			$table->morphs('tranzakt_taggable', 'tranzakt_taggables_index_taggable');
			$this->common_columns(
				$table,
				'Link Tags with tagged items'
			);

			$table->unique(['deleted_at', 'tag_id', 'tranzakt_taggable_id', 'tranzakt_taggable_type'], 'tranzakt_taggables_unique_tag_id_taggable');
		});

        echo "Tranzakt apps metadata defined." . PHP_EOL;
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
		// Because of foreign key relationships, tables need to be dropped in reverse order
		Schema::dropIfExists('tranzakt_taggables');
		Schema::dropIfExists('tranzakt_tags');
		Schema::dropIfExists('tranzakt_versions');
		Schema::dropIfExists('tranzakt_applications');
		Schema::dropIfExists('tranzakt_databases');
    }
};
